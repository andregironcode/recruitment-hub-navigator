
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rtuzdeaxmpikwuvplcbh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ0dXpkZWF4bXBpa3d1dnBsY2JoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1MDYzMTIsImV4cCI6MjA1OTA4MjMxMn0.Ame9c-wN0mL45G_x01pcY0G1ryY1elR5LuUg7BWYJhU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create Supabase client with storage options
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: {
        'X-Client-Info': 'supabase-js-web/2.49.4',
      },
    },
  }
);

// Explicitly set the bucket ID for consistency
export const RESUME_BUCKET_ID = 'resumes';

// Check if storage buckets are accessible
export const checkStorageBuckets = async () => {
  try {
    console.log('Checking storage buckets accessibility...');
    
    // First, try to list all buckets to see what's available
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error('Error listing buckets:', listError);
      return { success: false, error: listError };
    }
    
    console.log('Available buckets:', buckets);
    
    // Improve error handling - directly try accessing the bucket
    // instead of just looking for it in the list
    // This handles the case where the bucket exists but isn't visible in the list
    let resumesBucket = buckets?.find(bucket => 
      bucket.id === RESUME_BUCKET_ID || 
      bucket.name === 'Resumes Storage'
    );
    
    // If we don't find the bucket in the list, try to access it directly
    if (!resumesBucket) {
      console.log('Bucket not found in list, trying direct access...');
      try {
        // Try to access the bucket directly - this can work even if listBuckets doesn't show it
        const { data, error } = await supabase.storage.from(RESUME_BUCKET_ID).list('', {
          limit: 1,
        });
        
        if (!error) {
          console.log('Successfully accessed bucket directly');
          // Create a placeholder bucket info if direct access works
          resumesBucket = { id: RESUME_BUCKET_ID, name: 'Resumes Storage' };
        } else {
          console.warn('Could not access bucket directly:', error);
          
          // We'll still return failure since the bucket isn't accessible
          return { 
            success: false, 
            error: new Error('Resume storage not accessible. Please ensure the bucket exists and permissions are set correctly.')
          };
        }
      } catch (directAccessError) {
        console.error('Error directly accessing bucket:', directAccessError);
        return { 
          success: false, 
          error: new Error('Failed to access resume storage. This may be a configuration issue.')
        };
      }
    }
    
    console.log('Resumes bucket exists and is accessible:', resumesBucket);
    
    // Try to access the bucket directly to confirm permissions
    try {
      const { data, error } = await supabase.storage.from(RESUME_BUCKET_ID).list();
      
      if (error) {
        console.warn('Could access bucket but not list contents:', error);
        // We'll still return success since the bucket exists, but log the warning
      } else {
        console.log('Successfully listed bucket contents:', data);
      }
    } catch (listContentError) {
      console.warn('Error listing bucket contents:', listContentError);
      // Still continue if bucket exists but we can't list contents
    }
    
    return { success: true, bucketInfo: resumesBucket };
  } catch (error) {
    console.error('Failed to check storage buckets:', error);
    return { success: false, error };
  }
};

// Helper function to upload a file to the resumes bucket
export const uploadResumeFile = async (file: File): Promise<{ url?: string; error?: Error }> => {
  try {
    // Check if the bucket is accessible first
    const bucketCheck = await checkStorageBuckets();
    if (!bucketCheck.success) {
      return { error: bucketCheck.error };
    }
    
    const fileExt = file.name.split('.').pop();
    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 15)}.${fileExt}`;
    const filePath = fileName;
    
    console.log(`Uploading file to ${RESUME_BUCKET_ID} bucket: ${filePath}`);
    
    const { error: uploadError, data: uploadData } = await supabase.storage
      .from(RESUME_BUCKET_ID)
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: false
      });

    if (uploadError) {
      console.error('Error uploading file to Supabase Storage:', uploadError);
      return { error: new Error(`Failed to upload resume: ${uploadError.message}`) };
    }

    if (!uploadData || !uploadData.path) {
      return { error: new Error('Upload failed - no data returned from server') };
    }

    const { data: publicUrlData } = supabase.storage
      .from(RESUME_BUCKET_ID)
      .getPublicUrl(uploadData.path);

    if (!publicUrlData || !publicUrlData.publicUrl) {
      return { error: new Error('Failed to get resume URL') };
    }

    console.log('File uploaded successfully, URL obtained:', publicUrlData.publicUrl);
    return { url: publicUrlData.publicUrl };
  } catch (error) {
    console.error('File upload error:', error);
    return { error: error instanceof Error ? error : new Error('An unknown error occurred during file upload') };
  }
};
